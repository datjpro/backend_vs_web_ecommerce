{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ecommerce\\\\frontend\\\\src\\\\context\\\\AppContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [categories, setCategories] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [user, setUser] = useState(null); // Add state for the user\n\n  const fetchCategories = async () => {\n    try {\n      const res = await axios.get('http://localhost:3001/api/category/all');\n      setCategories(res.data || []);\n    } catch (error) {\n      console.error('Lỗi khi lấy danh mục:', error.message);\n    }\n  };\n  const fetchProduct = async () => {\n    try {\n      const res = await axios.get('http://localhost:4003/api/product/all');\n      setProducts(res.data.products || []);\n    } catch (error) {\n      console.error('Lỗi khi lấy danh sách sản phẩm:', error.message);\n    }\n  };\n  const [isAppInitialized, setIsAppInitialized] = useState(false);\n  useEffect(() => {\n    fetchProduct();\n    fetchCategories();\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setIsAppInitialized(true); // báo hiệu đã load xong\n  }, []);\n  const handleLogin = userData => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const value = {\n    categories,\n    setCategories,\n    setProducts,\n    products,\n    user,\n    handleLogin,\n    handleLogout\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(AppContextProvider, \"ed4RTtPIEtihY/+NdnSWgw+c3iA=\");\n_c = AppContextProvider;\nexport const useAppContext = () => {\n  _s2();\n  return useContext(AppContext);\n};\n// const [customer, setCustomer] = useState(null);\n// const [seller, setSeller] = useState(null);\n// const [cartItems, setCartItems] = useState(() => {\n//     const storedCustomer = localStorage.getItem('customer');\n//     const userId = storedCustomer ? JSON.parse(storedCustomer)?._id || JSON.parse(storedCustomer)?.id : null;\n//     const cartKey = userId ? `cartItems_user_${userId}` : 'cartItems_guest';\n//     const storedCart = localStorage.getItem(cartKey);\n//     return storedCart ? JSON.parse(storedCart) : [];\n// });\n// const [categories, setCategories] = useState([]);\n// const navigate = useNavigate();\n\n// const getCartKey = () => {\n//     const storedCustomer = localStorage.getItem('customer');\n//     const userId = storedCustomer ? JSON.parse(storedCustomer)?._id || JSON.parse(storedCustomer)?.id : null;\n//     return userId ? `cartItems_user_${userId}` : 'cartItems_guest';\n// };\n\n// const getProfileKey = (userId) => {\n//     return userId ? `customerProfile_user_${userId}` : 'customerProfile_guest';\n// };\n\n// const [customerProfile, setCustomerProfile] = useState(() => {\n//     const storedCustomer = localStorage.getItem('customer');\n//     const userId = storedCustomer ? JSON.parse(storedCustomer)?._id || JSON.parse(storedCustomer)?.id : null;\n//     const profileKey = userId ? `customerProfile_user_${userId}` : 'customerProfile_guest';\n//     const storedProfile = localStorage.getItem(profileKey);\n//     return storedProfile ? JSON.parse(storedProfile) : { phone: '', birthday: '', gender: '', city: '', describe: '' };\n// });\n\n// const handleLogout = () => {\n//     localStorage.removeItem(getCartKey());\n//     localStorage.removeItem('token');\n//     const storedCustomer = localStorage.getItem('customer');\n//     const userId = storedCustomer ? JSON.parse(storedCustomer)?._id || JSON.parse(storedCustomer)?.id : null;\n//     if(userId){\n//       localStorage.removeItem(getProfileKey(userId));\n//     }\n//     localStorage.removeItem('customer');\n//     setCustomer(null);\n//     setSeller(null);\n//     setCartItems([]);\n//     setCustomerProfile({ phone: '', birthday: '', gender: '', city: '', describe: '' });\n//     navigate('/login');\n// };\n\n// const fetchCartItems = async (customerId) => {\n//     try {\n//         const res = await axios.get(`http://localhost:3003/api/cart/customer/${customerId}`, {\n//             headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n//         });\n//         console.log('Cart data from server:', res.data);\n//         if (Array.isArray(res.data)) {\n//             const formattedCart = res.data.map(item => ({\n//                 _id: item._id,\n//                 productId: item.productId._id,\n//                 quantity: item.quantity,\n//                 productName: item.productId.name,\n//                 productImage: item.productId.image?.[0],\n//                 productPrice: item.productId.price\n//             }));\n//             setCartItems(formattedCart);\n//             localStorage.setItem(getCartKey(), JSON.stringify(formattedCart));\n//         } else {\n//             const storedCart = localStorage.getItem(getCartKey());\n//             if (storedCart) {\n//                 setCartItems(JSON.parse(storedCart));\n//             } else {\n//                 setCartItems([]);\n//             }\n//         }\n//     } catch (error) {\n//         console.error(\"Lỗi khi tải giỏ hàng:\", error);\n//         const storedCart = localStorage.getItem(getCartKey());\n//         if (storedCart) {\n//             setCartItems(JSON.parse(storedCart));\n//         } else {\n//             setCartItems([]);\n//         }\n//     }\n// };\n\n// const fetchCategories = async () => {\n//     try {\n//         const res = await axios.get('http://localhost:3001/api/category/all');\n//         setCategories(res.data || []);\n//     } catch (error) {\n//         console.error('Lỗi khi lấy danh mục:', error.message);\n//     }\n// };\n\n// const addToCart = async (product, quantity) => {\n//     try {\n//         const storedCustomer = JSON.parse(localStorage.getItem('customer'));\n//         const customerId = storedCustomer?._id || storedCustomer?.id;\n\n//         setCartItems(prev => {\n//             const existingItem = prev.find(item => item.productId === product._id);\n//             let updatedCart;\n//             if (existingItem) {\n//                 updatedCart = prev.map(item =>\n//                     item.productId === product._id\n//                         ? { ...item, quantity: item.quantity + quantity }\n//                         : item\n//                 );\n//             } else {\n//                 updatedCart = [\n//                     ...prev,\n//                     {\n//                         productId: product._id,\n//                         quantity,\n//                         productName: product.name,\n//                         productImage: product.image?.[0],\n//                         productPrice: product.price\n//                     }\n//                 ];\n//             }\n//             localStorage.setItem(getCartKey(), JSON.stringify(updatedCart));\n//             return updatedCart;\n//         });\n\n//         if (customerId) {\n//             await axios.post('http://localhost:3003/api/cart/create', {\n//                 productId: product._id,\n//                 quantity,\n//                 customerId\n//             }, {\n//                 headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n//             });\n//         }\n\n//     } catch (error) {\n//         console.log(error);\n//     }\n// };\n\n// const fetchProduct = async () => {\n//     try {\n//         const res = await axios.get('http://localhost:4003/api/product/all');\n//         setProducts(res.data.products || []);\n//     } catch (error) {\n//         console.error('Lỗi khi lấy danh sách sản phẩm:', error.message);\n//     }\n// };\n\n// // Hàm xử lý đăng nhập\n// const handleLogin = (customerData) => {\n//     const userId = customerData?._id || customerData?.id;\n//     const profileKey = getProfileKey(userId);\n//     const storedProfile = localStorage.getItem(profileKey);\n\n//     setCustomer(customerData);\n//     if (customerData.role === 'seller') {\n//         setSeller(customerData);\n//     }\n//     if (storedProfile) {\n//         setCustomerProfile(JSON.parse(storedProfile));\n//     } else {\n//          setCustomerProfile({ phone: '', birthday: '', gender: '', city: '', describe: '' });\n//     }\n//     localStorage.setItem('customer', JSON.stringify(customerData)); // Lưu thông tin customer vào localStorage\n//     fetchCartItems(userId);\n// };\n\n// useEffect(() => {\n//     fetchProduct();\n//     fetchCategories();\n\n//     const storedCustomer = localStorage.getItem('customer');\n//     if (storedCustomer) {\n//         const customerData = JSON.parse(storedCustomer);\n//         const userId = customerData?._id || customerData?.id;\n//         const profileKey = getProfileKey(userId);\n//         const storedProfile = localStorage.getItem(profileKey);\n\n//         setCustomer(customerData);\n//         if (customerData.role === 'seller') {\n//             setSeller(customerData);\n//         }\n//         if (storedProfile) {\n//             setCustomerProfile(JSON.parse(storedProfile));\n//         }\n//         fetchCartItems(userId);\n//     }\n// }, []);\n\n// useEffect(() => {\n//     if (customer) {\n//         const userId = customer?._id || customer?.id;\n//         const profileKey = getProfileKey(userId);\n//         localStorage.setItem(profileKey, JSON.stringify(customerProfile));\n//     }\n// }, [customerProfile, customer]);\n\n// useEffect(() => {\n//     localStorage.setItem(getCartKey(), JSON.stringify(cartItems));\n// }, [cartItems]);\n\n// const value = {\n//     navigate,\n//     products,\n//     cartItems,\n//     setCartItems,\n//     addToCart,\n//     customer,\n//     seller,\n//     setCustomer,\n//     setSeller,\n//     categories,\n//     handleLogout,\n//     customerProfile,\n//     setCustomerProfile,\n//     handleLogin\n// };\n_s2(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useNavigate","axios","AppContext","AppContextProvider","children","categories","setCategories","products","setProducts","user","setUser","fetchCategories","res","get","data","error","console","message","fetchProduct","isAppInitialized","setIsAppInitialized","storedUser","localStorage","getItem","JSON","parse","handleLogin","userData","setItem","stringify","handleLogout","removeItem","value","useAppContext"],"sources":["D:/Ecommerce/frontend/src/context/AppContext.jsx"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const AppContextProvider = ({ children }) => {\r\n    const [categories, setCategories] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [user, setUser] = useState(null); // Add state for the user\r\n\r\n    const fetchCategories = async () => {\r\n        try {\r\n            const res = await axios.get('http://localhost:3001/api/category/all');\r\n            setCategories(res.data || []);\r\n        } catch (error) {\r\n            console.error('Lỗi khi lấy danh mục:', error.message);\r\n        }\r\n    };\r\n\r\n    const fetchProduct = async () => {\r\n        try {\r\n            const res = await axios.get('http://localhost:4003/api/product/all');\r\n            setProducts(res.data.products || []);\r\n        } catch (error) {\r\n            console.error('Lỗi khi lấy danh sách sản phẩm:', error.message);\r\n        }\r\n    };\r\n\r\n    const [isAppInitialized, setIsAppInitialized] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchProduct();\r\n        fetchCategories();\r\n        const storedUser = localStorage.getItem('user');\r\n        if (storedUser) {\r\n            setUser(JSON.parse(storedUser));\r\n        }\r\n        setIsAppInitialized(true); // báo hiệu đã load xong\r\n    }, []);\r\n\r\n\r\n    const handleLogin = (userData) => {\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        setUser(null);\r\n        localStorage.removeItem('user');\r\n    };\r\n\r\n    const value = {\r\n        categories,\r\n        setCategories,\r\n        setProducts,\r\n        products,\r\n        user,\r\n        handleLogin,\r\n        handleLogout,\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider value={value}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAppContext = () => useContext(AppContext);\r\n// const [customer, setCustomer] = useState(null);\r\n// const [seller, setSeller] = useState(null);\r\n// const [cartItems, setCartItems] = useState(() => {\r\n//     const storedCustomer = localStorage.getItem('customer');\r\n//     const userId = storedCustomer ? JSON.parse(storedCustomer)?._id || JSON.parse(storedCustomer)?.id : null;\r\n//     const cartKey = userId ? `cartItems_user_${userId}` : 'cartItems_guest';\r\n//     const storedCart = localStorage.getItem(cartKey);\r\n//     return storedCart ? JSON.parse(storedCart) : [];\r\n// });\r\n// const [categories, setCategories] = useState([]);\r\n// const navigate = useNavigate();\r\n\r\n// const getCartKey = () => {\r\n//     const storedCustomer = localStorage.getItem('customer');\r\n//     const userId = storedCustomer ? JSON.parse(storedCustomer)?._id || JSON.parse(storedCustomer)?.id : null;\r\n//     return userId ? `cartItems_user_${userId}` : 'cartItems_guest';\r\n// };\r\n\r\n// const getProfileKey = (userId) => {\r\n//     return userId ? `customerProfile_user_${userId}` : 'customerProfile_guest';\r\n// };\r\n\r\n// const [customerProfile, setCustomerProfile] = useState(() => {\r\n//     const storedCustomer = localStorage.getItem('customer');\r\n//     const userId = storedCustomer ? JSON.parse(storedCustomer)?._id || JSON.parse(storedCustomer)?.id : null;\r\n//     const profileKey = userId ? `customerProfile_user_${userId}` : 'customerProfile_guest';\r\n//     const storedProfile = localStorage.getItem(profileKey);\r\n//     return storedProfile ? JSON.parse(storedProfile) : { phone: '', birthday: '', gender: '', city: '', describe: '' };\r\n// });\r\n\r\n\r\n// const handleLogout = () => {\r\n//     localStorage.removeItem(getCartKey());\r\n//     localStorage.removeItem('token');\r\n//     const storedCustomer = localStorage.getItem('customer');\r\n//     const userId = storedCustomer ? JSON.parse(storedCustomer)?._id || JSON.parse(storedCustomer)?.id : null;\r\n//     if(userId){\r\n//       localStorage.removeItem(getProfileKey(userId));\r\n//     }\r\n//     localStorage.removeItem('customer');\r\n//     setCustomer(null);\r\n//     setSeller(null);\r\n//     setCartItems([]);\r\n//     setCustomerProfile({ phone: '', birthday: '', gender: '', city: '', describe: '' });\r\n//     navigate('/login');\r\n// };\r\n\r\n// const fetchCartItems = async (customerId) => {\r\n//     try {\r\n//         const res = await axios.get(`http://localhost:3003/api/cart/customer/${customerId}`, {\r\n//             headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n//         });\r\n//         console.log('Cart data from server:', res.data);\r\n//         if (Array.isArray(res.data)) {\r\n//             const formattedCart = res.data.map(item => ({\r\n//                 _id: item._id,\r\n//                 productId: item.productId._id,\r\n//                 quantity: item.quantity,\r\n//                 productName: item.productId.name,\r\n//                 productImage: item.productId.image?.[0],\r\n//                 productPrice: item.productId.price\r\n//             }));\r\n//             setCartItems(formattedCart);\r\n//             localStorage.setItem(getCartKey(), JSON.stringify(formattedCart));\r\n//         } else {\r\n//             const storedCart = localStorage.getItem(getCartKey());\r\n//             if (storedCart) {\r\n//                 setCartItems(JSON.parse(storedCart));\r\n//             } else {\r\n//                 setCartItems([]);\r\n//             }\r\n//         }\r\n//     } catch (error) {\r\n//         console.error(\"Lỗi khi tải giỏ hàng:\", error);\r\n//         const storedCart = localStorage.getItem(getCartKey());\r\n//         if (storedCart) {\r\n//             setCartItems(JSON.parse(storedCart));\r\n//         } else {\r\n//             setCartItems([]);\r\n//         }\r\n//     }\r\n// };\r\n\r\n// const fetchCategories = async () => {\r\n//     try {\r\n//         const res = await axios.get('http://localhost:3001/api/category/all');\r\n//         setCategories(res.data || []);\r\n//     } catch (error) {\r\n//         console.error('Lỗi khi lấy danh mục:', error.message);\r\n//     }\r\n// };\r\n\r\n// const addToCart = async (product, quantity) => {\r\n//     try {\r\n//         const storedCustomer = JSON.parse(localStorage.getItem('customer'));\r\n//         const customerId = storedCustomer?._id || storedCustomer?.id;\r\n\r\n//         setCartItems(prev => {\r\n//             const existingItem = prev.find(item => item.productId === product._id);\r\n//             let updatedCart;\r\n//             if (existingItem) {\r\n//                 updatedCart = prev.map(item =>\r\n//                     item.productId === product._id\r\n//                         ? { ...item, quantity: item.quantity + quantity }\r\n//                         : item\r\n//                 );\r\n//             } else {\r\n//                 updatedCart = [\r\n//                     ...prev,\r\n//                     {\r\n//                         productId: product._id,\r\n//                         quantity,\r\n//                         productName: product.name,\r\n//                         productImage: product.image?.[0],\r\n//                         productPrice: product.price\r\n//                     }\r\n//                 ];\r\n//             }\r\n//             localStorage.setItem(getCartKey(), JSON.stringify(updatedCart));\r\n//             return updatedCart;\r\n//         });\r\n\r\n//         if (customerId) {\r\n//             await axios.post('http://localhost:3003/api/cart/create', {\r\n//                 productId: product._id,\r\n//                 quantity,\r\n//                 customerId\r\n//             }, {\r\n//                 headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n//             });\r\n//         }\r\n\r\n//     } catch (error) {\r\n//         console.log(error);\r\n//     }\r\n// };\r\n\r\n// const fetchProduct = async () => {\r\n//     try {\r\n//         const res = await axios.get('http://localhost:4003/api/product/all');\r\n//         setProducts(res.data.products || []);\r\n//     } catch (error) {\r\n//         console.error('Lỗi khi lấy danh sách sản phẩm:', error.message);\r\n//     }\r\n// };\r\n\r\n// // Hàm xử lý đăng nhập\r\n// const handleLogin = (customerData) => {\r\n//     const userId = customerData?._id || customerData?.id;\r\n//     const profileKey = getProfileKey(userId);\r\n//     const storedProfile = localStorage.getItem(profileKey);\r\n\r\n//     setCustomer(customerData);\r\n//     if (customerData.role === 'seller') {\r\n//         setSeller(customerData);\r\n//     }\r\n//     if (storedProfile) {\r\n//         setCustomerProfile(JSON.parse(storedProfile));\r\n//     } else {\r\n//          setCustomerProfile({ phone: '', birthday: '', gender: '', city: '', describe: '' });\r\n//     }\r\n//     localStorage.setItem('customer', JSON.stringify(customerData)); // Lưu thông tin customer vào localStorage\r\n//     fetchCartItems(userId);\r\n// };\r\n\r\n// useEffect(() => {\r\n//     fetchProduct();\r\n//     fetchCategories();\r\n\r\n//     const storedCustomer = localStorage.getItem('customer');\r\n//     if (storedCustomer) {\r\n//         const customerData = JSON.parse(storedCustomer);\r\n//         const userId = customerData?._id || customerData?.id;\r\n//         const profileKey = getProfileKey(userId);\r\n//         const storedProfile = localStorage.getItem(profileKey);\r\n\r\n//         setCustomer(customerData);\r\n//         if (customerData.role === 'seller') {\r\n//             setSeller(customerData);\r\n//         }\r\n//         if (storedProfile) {\r\n//             setCustomerProfile(JSON.parse(storedProfile));\r\n//         }\r\n//         fetchCartItems(userId);\r\n//     }\r\n// }, []);\r\n\r\n// useEffect(() => {\r\n//     if (customer) {\r\n//         const userId = customer?._id || customer?.id;\r\n//         const profileKey = getProfileKey(userId);\r\n//         localStorage.setItem(profileKey, JSON.stringify(customerProfile));\r\n//     }\r\n// }, [customerProfile, customer]);\r\n\r\n// useEffect(() => {\r\n//     localStorage.setItem(getCartKey(), JSON.stringify(cartItems));\r\n// }, [cartItems]);\r\n\r\n// const value = {\r\n//     navigate,\r\n//     products,\r\n//     cartItems,\r\n//     setCartItems,\r\n//     addToCart,\r\n//     customer,\r\n//     seller,\r\n//     setCustomer,\r\n//     setSeller,\r\n//     categories,\r\n//     handleLogout,\r\n//     customerProfile,\r\n//     setCustomerProfile,\r\n//     handleLogin\r\n// };\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,OAAO,MAAMC,UAAU,gBAAGN,aAAa,EAAE;AAEzC,OAAO,MAAMO,kBAAkB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC3C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExC,MAAMY,eAAe,GAAG,YAAY;IAChC,IAAI;MACA,MAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,wCAAwC,CAAC;MACrEP,aAAa,CAACM,GAAG,CAACE,IAAI,IAAI,EAAE,CAAC;IACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACzD;EACJ,CAAC;EAED,MAAMC,YAAY,GAAG,YAAY;IAC7B,IAAI;MACA,MAAMN,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,uCAAuC,CAAC;MACpEL,WAAW,CAACI,GAAG,CAACE,IAAI,CAACP,QAAQ,IAAI,EAAE,CAAC;IACxC,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACE,OAAO,CAAC;IACnE;EACJ,CAAC;EAED,MAAM,CAACE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAE/DD,SAAS,CAAC,MAAM;IACZoB,YAAY,EAAE;IACdP,eAAe,EAAE;IACjB,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACZX,OAAO,CAACc,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IACnC;IACAD,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMM,WAAW,GAAIC,QAAQ,IAAK;IAC9BjB,OAAO,CAACiB,QAAQ,CAAC;IACjBL,YAAY,CAACM,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAACK,SAAS,CAACF,QAAQ,CAAC,CAAC;EAC1D,CAAC;EAED,MAAMG,YAAY,GAAG,MAAM;IACvBpB,OAAO,CAAC,IAAI,CAAC;IACbY,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;EACnC,CAAC;EAED,MAAMC,KAAK,GAAG;IACV3B,UAAU;IACVC,aAAa;IACbE,WAAW;IACXD,QAAQ;IACRE,IAAI;IACJiB,WAAW;IACXI;EACJ,CAAC;EAED,oBACI,QAAC,UAAU,CAAC,QAAQ;IAAC,KAAK,EAAEE,KAAM;IAAA,UAC7B5B;EAAQ;IAAA;IAAA;IAAA;EAAA,QACS;AAE9B,CAAC;AAAC,GA7DWD,kBAAkB;AAAA,KAAlBA,kBAAkB;AA+D/B,OAAO,MAAM8B,aAAa,GAAG;EAAA;EAAA,OAAMpC,UAAU,CAACK,UAAU,CAAC;AAAA;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAvNa+B,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}