{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useAppContext } from '../../context/AppContext';\n// import axios from 'axios';\n// import './order.css';\n// import { useNavigate } from 'react-router-dom';\n\n// export const Order = () => {\n//   const { user } = useAppContext();\n//   const navigate = useNavigate();\n//   const [cartItems, setCartItems] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [shippingInfo, setShippingInfo] = useState({\n//     name: '',\n//     phone: '',\n//     province: '',\n//     address: '',\n//   });\n//   const [paymentMethod, setPaymentMethod] = useState('');\n//   const [transportMethod, setTransportMethod] = useState('');\n//   const [totalAmount, setTotalAmount] = useState(0);\n\n//   const transportCosts = {\n//     GHN: 35000,\n//     GHTK: 25000,\n//     ViettelPost: 30000,\n//   };\n\n//   // Lấy giỏ hàng thật từ backend\n//   useEffect(() => {\n//     if (!user?.id) {\n//       setCartItems([]);\n//       setLoading(false);\n//       return;\n//     }\n//     setLoading(true);\n//     axios.get(`http://localhost:3003/api/cart/user/${user.id}`)\n//       .then((res) => {\n//         const cart = res.data;\n//         const items = cart.items || [];\n//         setCartItems(items);\n\n//         // Tính tổng tiền sản phẩm (chưa bao gồm phí vận chuyển)\n//         const productTotal = items.reduce(\n//           (sum, item) => sum + item.quantity * item.productId.price,\n//           0\n//         );\n//         setTotalAmount(productTotal);\n//       })\n//       .catch((err) => {\n//         console.error('Lỗi lấy giỏ hàng:', err);\n//         setCartItems([]);\n//         setTotalAmount(0);\n//       })\n//       .finally(() => {\n//         setLoading(false);\n//       });\n//   }, [user]);\n\n//   // Cập nhật tổng tiền khi chọn đơn vị vận chuyển\n//   const updateTotalAmount = (method) => {\n//     const cost = transportCosts[method] || 0;\n//     const productTotal = cartItems.reduce(\n//       (sum, item) => sum + item.quantity * item.productId.price,\n//       0\n//     );\n//     setTotalAmount(productTotal + cost);\n//   };\n\n//   const handleTransportChange = (e) => {\n//     setTransportMethod(e.target.value);\n//     updateTotalAmount(e.target.value);\n//   };\n\n//   const handleOrderSubmit = async () => {\n//     if (!shippingInfo.name || !shippingInfo.phone || !shippingInfo.province || !shippingInfo.address) {\n//       alert('Vui lòng điền đầy đủ thông tin địa chỉ nhận hàng.');\n//       return;\n//     }\n//     if (!paymentMethod) {\n//       alert('Vui lòng chọn phương thức thanh toán.');\n//       return;\n//     }\n//     if (!transportMethod) {\n//       alert('Vui lòng chọn đơn vị vận chuyển.');\n//       return;\n//     }\n//     if (cartItems.length === 0) {\n//       alert('Giỏ hàng đang trống.');\n//       return;\n//     }\n\n//     try {\n//       // Lấy paymentId\n//       const paymentRes = await axios.get(`http://localhost:3007/api/payment/method/${paymentMethod}`);\n//       const paymentData = Array.isArray(paymentRes.data) ? paymentRes.data[0] : paymentRes.data;\n\n//       // Lấy transportId\n//       const transportRes = await axios.get(`http://localhost:3005/api/transport/method/${transportMethod}`);\n//       const transportData = Array.isArray(transportRes.data) ? transportRes.data[0] : transportRes.data;\n\n//       if (!paymentData?._id || !transportData?._id) {\n//         alert('Không tìm thấy phương thức thanh toán hoặc vận chuyển hợp lệ');\n//         return;\n//       }\n\n//       // Tạo order\n//       const orderData = {\n//         totalOrder: totalAmount,\n//         customerId: user.id,\n//         paymentId: paymentData._id,\n//         shippingInfo,\n//         transportId: transportData._id,\n//         status: 'pending',\n//         userId: user.id,\n//       };\n\n//       const orderRes = await axios.post('http://localhost:4000/api/order/create', orderData);\n//       const orderId = orderRes.data.order?._id;\n//       if (!orderId) {\n//         alert('Không tìm thấy ID đơn hàng.');\n//         return;\n//       }\n\n//       // Tạo order details cho từng sản phẩm\n//       for (const item of cartItems) {\n//         const orderDetailsData = {\n//           orderId,\n//           productId: item.productId._id,\n//           quantity: item.quantity,\n//           totalPrice: item.quantity * item.productId.price,\n//         };\n//         await axios.post('http://localhost:4001/api/orderDetails/create', orderDetailsData);\n//       }\n\n//       // Xóa giỏ hàng backend sau khi đặt thành công\n//       await axios.delete(`http://localhost:3003/api/cart/deleteAllCartByUser/${user.id}`);\n\n//       alert('Đặt hàng thành công!');\n//       navigate('/myOrder');\n//     } catch (error) {\n//       console.error('Lỗi khi tạo đơn hàng:', error);\n//       alert('Đặt hàng không thành công. Vui lòng thử lại.');\n//     }\n//   };\n\n//   return (\n//     <div className=\"payment-container\">\n//       <div className=\"address-section\">\n//         <h3>Địa chỉ nhận hàng</h3>\n//         <form className=\"address-form\" onSubmit={e => e.preventDefault()}>\n//           <input type=\"text\" placeholder=\"Họ và tên\" value={shippingInfo.name} onChange={(e) => setShippingInfo({ ...shippingInfo, name: e.target.value })} required />\n//           <input type=\"tel\" placeholder=\"Số điện thoại\" value={shippingInfo.phone} onChange={(e) => setShippingInfo({ ...shippingInfo, phone: e.target.value })} required />\n//           <input type=\"text\" placeholder=\"Tỉnh / Thành phố\" value={shippingInfo.province} onChange={(e) => setShippingInfo({ ...shippingInfo, province: e.target.value })} required />\n//           <input type=\"text\" placeholder=\"Địa chỉ chi tiết\" value={shippingInfo.address} onChange={(e) => setShippingInfo({ ...shippingInfo, address: e.target.value })} required />\n//         </form>\n//       </div>\n\n//       <div className=\"payment-method-section\">\n//         <h3>Phương thức thanh toán</h3>\n//         <label>\n//           <input type=\"radio\" name=\"paymentMethod\" value=\"cod\" onChange={(e) => setPaymentMethod(e.target.value)} />\n//           Thanh toán khi nhận hàng (COD)\n//         </label>\n//       </div>\n\n//       <div className=\"transport-method\">\n//         <h3>Chọn đơn vị vận chuyển</h3>\n//         <label>\n//           <input type=\"radio\" name=\"transportMethod\" value=\"GHN\" onChange={handleTransportChange} />\n//           GHN: 35.000 đ\n//         </label>\n//         <label>\n//           <input type=\"radio\" name=\"transportMethod\" value=\"GHTK\" onChange={handleTransportChange} />\n//           GHTK: 25.000 đ\n//         </label>\n//         <label>\n//           <input type=\"radio\" name=\"transportMethod\" value=\"ViettelPost\" onChange={handleTransportChange} />\n//           Viettel Post: 30.000 đ\n//         </label>\n//       </div>\n\n//       <div className=\"product-summary\">\n//         <h3>Sản phẩm</h3>\n//         {loading ? (\n//           <p>Đang tải...</p>\n//         ) : cartItems.length === 0 ? (\n//           <p>Không có sản phẩm.</p>\n//         ) : (\n//           cartItems.map((item) => (\n//             <div className=\"summary-item\" key={item._id}>\n//               <img src={item.productId.image[0]} alt={item.productId.name} />\n//               <div>\n//                 <p>{item.productId.name}</p>\n//                 <p>Số lượng: {item.quantity}</p>\n//                 <p>Giá: {item.productId.price.toLocaleString()} đ</p>\n//               </div>\n//             </div>\n//           ))\n//         )}\n//       </div>\n\n//       <div className=\"payment-summary\">\n//         <h3>Tổng thanh toán</h3>\n//         <p>{totalAmount.toLocaleString()} đ</p>\n//         <button className=\"btn-confirm\" onClick={handleOrderSubmit} disabled={loading}>\n//           Đặt hàng\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\nconst handleOrderSubmit = async () => {\n  if (!shippingInfo.name || !shippingInfo.phone || !shippingInfo.province || !shippingInfo.address) {\n    alert('Vui lòng điền đầy đủ thông tin địa chỉ nhận hàng.');\n    return;\n  }\n  if (!paymentMethod) {\n    alert('Vui lòng chọn phương thức thanh toán.');\n    return;\n  }\n  if (!transportMethod) {\n    alert('Vui lòng chọn đơn vị vận chuyển.');\n    return;\n  }\n  if (cartItems.length === 0) {\n    alert('Giỏ hàng đang trống.');\n    return;\n  }\n  try {\n    var _orderRes$data$order;\n    // Lấy paymentId\n    const paymentRes = await axios.get(`http://localhost:3007/api/payment/method/${paymentMethod}`);\n    const paymentData = Array.isArray(paymentRes.data) ? paymentRes.data[0] : paymentRes.data;\n\n    // Lấy transportId\n    const transportRes = await axios.get(`http://localhost:3005/api/transport/method/${transportMethod}`);\n    const transportData = Array.isArray(transportRes.data) ? transportRes.data[0] : transportRes.data;\n    if (!(paymentData !== null && paymentData !== void 0 && paymentData._id) || !(transportData !== null && transportData !== void 0 && transportData._id)) {\n      alert('Không tìm thấy phương thức thanh toán hoặc vận chuyển hợp lệ');\n      return;\n    }\n    const orderData = {\n      totalOrder: totalAmount,\n      customerId: user.id,\n      paymentId: paymentData._id,\n      shippingInfo,\n      transportId: transportData._id,\n      status: 'pending',\n      userId: user.id\n    };\n    console.log('Gửi orderData:', orderData);\n    const orderRes = await axios.post('http://localhost:4000/api/order/create', orderData);\n    console.log('orderRes.data:', orderRes.data);\n    const orderId = (_orderRes$data$order = orderRes.data.order) === null || _orderRes$data$order === void 0 ? void 0 : _orderRes$data$order._id;\n    if (!orderId) {\n      alert('Không tìm thấy ID đơn hàng.');\n      return;\n    }\n    for (const item of cartItems) {\n      const orderDetailsData = {\n        orderId,\n        productId: item.productId._id,\n        quantity: item.quantity,\n        totalPrice: item.quantity * item.productId.price\n      };\n      console.log('Gửi orderDetailsData:', orderDetailsData);\n      await axios.post('http://localhost:4001/api/orderDetails/create', orderDetailsData);\n    }\n    await axios.delete(`http://localhost:3003/api/cart/deleteAllCartByUser/${user.id}`);\n    alert('Đặt hàng thành công!');\n    navigate('/myOrder');\n  } catch (error) {\n    if (error.response) {\n      console.error('Lỗi response:', error.response.data);\n      alert('Đặt hàng không thành công: ' + (error.response.data.message || 'Vui lòng thử lại.'));\n    } else {\n      console.error('Lỗi khi tạo đơn hàng:', error);\n      alert('Đặt hàng không thành công. Vui lòng thử lại.');\n    }\n  }\n};","map":{"version":3,"names":["handleOrderSubmit","shippingInfo","name","phone","province","address","alert","paymentMethod","transportMethod","cartItems","length","paymentRes","axios","get","paymentData","Array","isArray","data","transportRes","transportData","_id","orderData","totalOrder","totalAmount","customerId","user","id","paymentId","transportId","status","userId","console","log","orderRes","post","orderId","order","item","orderDetailsData","productId","quantity","totalPrice","price","delete","navigate","error","response","message"],"sources":["D:/Ecommerce/frontend/src/components/Order/Order.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useAppContext } from '../../context/AppContext';\r\n// import axios from 'axios';\r\n// import './order.css';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// export const Order = () => {\r\n//   const { user } = useAppContext();\r\n//   const navigate = useNavigate();\r\n//   const [cartItems, setCartItems] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [shippingInfo, setShippingInfo] = useState({\r\n//     name: '',\r\n//     phone: '',\r\n//     province: '',\r\n//     address: '',\r\n//   });\r\n//   const [paymentMethod, setPaymentMethod] = useState('');\r\n//   const [transportMethod, setTransportMethod] = useState('');\r\n//   const [totalAmount, setTotalAmount] = useState(0);\r\n\r\n//   const transportCosts = {\r\n//     GHN: 35000,\r\n//     GHTK: 25000,\r\n//     ViettelPost: 30000,\r\n//   };\r\n\r\n//   // Lấy giỏ hàng thật từ backend\r\n//   useEffect(() => {\r\n//     if (!user?.id) {\r\n//       setCartItems([]);\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n//     setLoading(true);\r\n//     axios.get(`http://localhost:3003/api/cart/user/${user.id}`)\r\n//       .then((res) => {\r\n//         const cart = res.data;\r\n//         const items = cart.items || [];\r\n//         setCartItems(items);\r\n\r\n//         // Tính tổng tiền sản phẩm (chưa bao gồm phí vận chuyển)\r\n//         const productTotal = items.reduce(\r\n//           (sum, item) => sum + item.quantity * item.productId.price,\r\n//           0\r\n//         );\r\n//         setTotalAmount(productTotal);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.error('Lỗi lấy giỏ hàng:', err);\r\n//         setCartItems([]);\r\n//         setTotalAmount(0);\r\n//       })\r\n//       .finally(() => {\r\n//         setLoading(false);\r\n//       });\r\n//   }, [user]);\r\n\r\n//   // Cập nhật tổng tiền khi chọn đơn vị vận chuyển\r\n//   const updateTotalAmount = (method) => {\r\n//     const cost = transportCosts[method] || 0;\r\n//     const productTotal = cartItems.reduce(\r\n//       (sum, item) => sum + item.quantity * item.productId.price,\r\n//       0\r\n//     );\r\n//     setTotalAmount(productTotal + cost);\r\n//   };\r\n\r\n//   const handleTransportChange = (e) => {\r\n//     setTransportMethod(e.target.value);\r\n//     updateTotalAmount(e.target.value);\r\n//   };\r\n\r\n//   const handleOrderSubmit = async () => {\r\n//     if (!shippingInfo.name || !shippingInfo.phone || !shippingInfo.province || !shippingInfo.address) {\r\n//       alert('Vui lòng điền đầy đủ thông tin địa chỉ nhận hàng.');\r\n//       return;\r\n//     }\r\n//     if (!paymentMethod) {\r\n//       alert('Vui lòng chọn phương thức thanh toán.');\r\n//       return;\r\n//     }\r\n//     if (!transportMethod) {\r\n//       alert('Vui lòng chọn đơn vị vận chuyển.');\r\n//       return;\r\n//     }\r\n//     if (cartItems.length === 0) {\r\n//       alert('Giỏ hàng đang trống.');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       // Lấy paymentId\r\n//       const paymentRes = await axios.get(`http://localhost:3007/api/payment/method/${paymentMethod}`);\r\n//       const paymentData = Array.isArray(paymentRes.data) ? paymentRes.data[0] : paymentRes.data;\r\n\r\n//       // Lấy transportId\r\n//       const transportRes = await axios.get(`http://localhost:3005/api/transport/method/${transportMethod}`);\r\n//       const transportData = Array.isArray(transportRes.data) ? transportRes.data[0] : transportRes.data;\r\n\r\n//       if (!paymentData?._id || !transportData?._id) {\r\n//         alert('Không tìm thấy phương thức thanh toán hoặc vận chuyển hợp lệ');\r\n//         return;\r\n//       }\r\n\r\n//       // Tạo order\r\n//       const orderData = {\r\n//         totalOrder: totalAmount,\r\n//         customerId: user.id,\r\n//         paymentId: paymentData._id,\r\n//         shippingInfo,\r\n//         transportId: transportData._id,\r\n//         status: 'pending',\r\n//         userId: user.id,\r\n//       };\r\n\r\n//       const orderRes = await axios.post('http://localhost:4000/api/order/create', orderData);\r\n//       const orderId = orderRes.data.order?._id;\r\n//       if (!orderId) {\r\n//         alert('Không tìm thấy ID đơn hàng.');\r\n//         return;\r\n//       }\r\n\r\n//       // Tạo order details cho từng sản phẩm\r\n//       for (const item of cartItems) {\r\n//         const orderDetailsData = {\r\n//           orderId,\r\n//           productId: item.productId._id,\r\n//           quantity: item.quantity,\r\n//           totalPrice: item.quantity * item.productId.price,\r\n//         };\r\n//         await axios.post('http://localhost:4001/api/orderDetails/create', orderDetailsData);\r\n//       }\r\n\r\n//       // Xóa giỏ hàng backend sau khi đặt thành công\r\n//       await axios.delete(`http://localhost:3003/api/cart/deleteAllCartByUser/${user.id}`);\r\n\r\n//       alert('Đặt hàng thành công!');\r\n//       navigate('/myOrder');\r\n//     } catch (error) {\r\n//       console.error('Lỗi khi tạo đơn hàng:', error);\r\n//       alert('Đặt hàng không thành công. Vui lòng thử lại.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"payment-container\">\r\n//       <div className=\"address-section\">\r\n//         <h3>Địa chỉ nhận hàng</h3>\r\n//         <form className=\"address-form\" onSubmit={e => e.preventDefault()}>\r\n//           <input type=\"text\" placeholder=\"Họ và tên\" value={shippingInfo.name} onChange={(e) => setShippingInfo({ ...shippingInfo, name: e.target.value })} required />\r\n//           <input type=\"tel\" placeholder=\"Số điện thoại\" value={shippingInfo.phone} onChange={(e) => setShippingInfo({ ...shippingInfo, phone: e.target.value })} required />\r\n//           <input type=\"text\" placeholder=\"Tỉnh / Thành phố\" value={shippingInfo.province} onChange={(e) => setShippingInfo({ ...shippingInfo, province: e.target.value })} required />\r\n//           <input type=\"text\" placeholder=\"Địa chỉ chi tiết\" value={shippingInfo.address} onChange={(e) => setShippingInfo({ ...shippingInfo, address: e.target.value })} required />\r\n//         </form>\r\n//       </div>\r\n\r\n//       <div className=\"payment-method-section\">\r\n//         <h3>Phương thức thanh toán</h3>\r\n//         <label>\r\n//           <input type=\"radio\" name=\"paymentMethod\" value=\"cod\" onChange={(e) => setPaymentMethod(e.target.value)} />\r\n//           Thanh toán khi nhận hàng (COD)\r\n//         </label>\r\n//       </div>\r\n\r\n//       <div className=\"transport-method\">\r\n//         <h3>Chọn đơn vị vận chuyển</h3>\r\n//         <label>\r\n//           <input type=\"radio\" name=\"transportMethod\" value=\"GHN\" onChange={handleTransportChange} />\r\n//           GHN: 35.000 đ\r\n//         </label>\r\n//         <label>\r\n//           <input type=\"radio\" name=\"transportMethod\" value=\"GHTK\" onChange={handleTransportChange} />\r\n//           GHTK: 25.000 đ\r\n//         </label>\r\n//         <label>\r\n//           <input type=\"radio\" name=\"transportMethod\" value=\"ViettelPost\" onChange={handleTransportChange} />\r\n//           Viettel Post: 30.000 đ\r\n//         </label>\r\n//       </div>\r\n\r\n//       <div className=\"product-summary\">\r\n//         <h3>Sản phẩm</h3>\r\n//         {loading ? (\r\n//           <p>Đang tải...</p>\r\n//         ) : cartItems.length === 0 ? (\r\n//           <p>Không có sản phẩm.</p>\r\n//         ) : (\r\n//           cartItems.map((item) => (\r\n//             <div className=\"summary-item\" key={item._id}>\r\n//               <img src={item.productId.image[0]} alt={item.productId.name} />\r\n//               <div>\r\n//                 <p>{item.productId.name}</p>\r\n//                 <p>Số lượng: {item.quantity}</p>\r\n//                 <p>Giá: {item.productId.price.toLocaleString()} đ</p>\r\n//               </div>\r\n//             </div>\r\n//           ))\r\n//         )}\r\n//       </div>\r\n\r\n//       <div className=\"payment-summary\">\r\n//         <h3>Tổng thanh toán</h3>\r\n//         <p>{totalAmount.toLocaleString()} đ</p>\r\n//         <button className=\"btn-confirm\" onClick={handleOrderSubmit} disabled={loading}>\r\n//           Đặt hàng\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\nconst handleOrderSubmit = async () => {\r\n  if (!shippingInfo.name || !shippingInfo.phone || !shippingInfo.province || !shippingInfo.address) {\r\n    alert('Vui lòng điền đầy đủ thông tin địa chỉ nhận hàng.');\r\n    return;\r\n  }\r\n  if (!paymentMethod) {\r\n    alert('Vui lòng chọn phương thức thanh toán.');\r\n    return;\r\n  }\r\n  if (!transportMethod) {\r\n    alert('Vui lòng chọn đơn vị vận chuyển.');\r\n    return;\r\n  }\r\n  if (cartItems.length === 0) {\r\n    alert('Giỏ hàng đang trống.');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    // Lấy paymentId\r\n    const paymentRes = await axios.get(`http://localhost:3007/api/payment/method/${paymentMethod}`);\r\n    const paymentData = Array.isArray(paymentRes.data) ? paymentRes.data[0] : paymentRes.data;\r\n\r\n    // Lấy transportId\r\n    const transportRes = await axios.get(`http://localhost:3005/api/transport/method/${transportMethod}`);\r\n    const transportData = Array.isArray(transportRes.data) ? transportRes.data[0] : transportRes.data;\r\n\r\n    if (!paymentData?._id || !transportData?._id) {\r\n      alert('Không tìm thấy phương thức thanh toán hoặc vận chuyển hợp lệ');\r\n      return;\r\n    }\r\n\r\n    const orderData = {\r\n      totalOrder: totalAmount,\r\n      customerId: user.id,\r\n      paymentId: paymentData._id,\r\n      shippingInfo,\r\n      transportId: transportData._id,\r\n      status: 'pending',\r\n      userId: user.id,\r\n    };\r\n    console.log('Gửi orderData:', orderData);\r\n\r\n    const orderRes = await axios.post('http://localhost:4000/api/order/create', orderData);\r\n    console.log('orderRes.data:', orderRes.data);\r\n    const orderId = orderRes.data.order?._id;\r\n    if (!orderId) {\r\n      alert('Không tìm thấy ID đơn hàng.');\r\n      return;\r\n    }\r\n\r\n    for (const item of cartItems) {\r\n      const orderDetailsData = {\r\n        orderId,\r\n        productId: item.productId._id,\r\n        quantity: item.quantity,\r\n        totalPrice: item.quantity * item.productId.price,\r\n      };\r\n      console.log('Gửi orderDetailsData:', orderDetailsData);\r\n      await axios.post('http://localhost:4001/api/orderDetails/create', orderDetailsData);\r\n    }\r\n\r\n    await axios.delete(`http://localhost:3003/api/cart/deleteAllCartByUser/${user.id}`);\r\n\r\n    alert('Đặt hàng thành công!');\r\n    navigate('/myOrder');\r\n  } catch (error) {\r\n    if (error.response) {\r\n      console.error('Lỗi response:', error.response.data);\r\n      alert('Đặt hàng không thành công: ' + (error.response.data.message || 'Vui lòng thử lại.'));\r\n    } else {\r\n      console.error('Lỗi khi tạo đơn hàng:', error);\r\n      alert('Đặt hàng không thành công. Vui lòng thử lại.');\r\n    }\r\n  }\r\n};\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}