{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ecommerce\\\\frontend\\\\src\\\\components\\\\Order\\\\Order.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useAppContext } from '../../context/AppContext';\nimport axios from 'axios';\nimport './order.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Order = () => {\n  // const { cartItems, products, customerId, cartId, token } = useAppContext(); \n  // const [paymentMethod, setPaymentMethod] = useState('cod');\n  // const [shippingInfo, setShippingInfo] = useState({\n  //     name: '',\n  //     phone: '',\n  //     province: '',\n  //     address: ''\n  // });\n\n  // const selectedItems = cartItems.filter(item => item.selected);\n  // const getProductById = (id) => products.find((p) => p._id === id);\n\n  // const totalPrice = selectedItems.reduce((acc, item) => {\n  //     const prod = getProductById(item.productId);\n  //     if (!prod) return acc;\n  //     const price = prod.discounted_price || prod.price || 0;\n  //     return acc + price * item.quantity;\n  // }, 0);\n\n  // const handleOrderSubmit = async () => {\n  //     try {\n  //         if (!cartId || !customerId || !token) {\n  //             alert(\"Lỗi: Thiếu thông tin người dùng hoặc giỏ hàng.\");\n  //             return;\n  //         }\n\n  //         const paymentRes = await axios.post(\n  //             'http://localhost:3007/api/payment/create',\n  //             {\n  //                 paymentMethod: paymentMethod,\n  //                 paymentStatus: 'Pending'\n  //             },\n  //             {\n  //                 headers: {\n  //                     Authorization: `Bearer ${token}`\n  //                 }\n  //             }\n  //         );\n\n  //         const paymentId = paymentRes.data.payment._id;\n  //         if (!paymentId) throw new Error('Payment ID không hợp lệ');\n\n  //         const orderRes = await axios.post(\n  //             'http://localhost:4000/api/order/create',\n  //             {\n  //                 totalOrder: totalPrice,\n  //                 discountId: [],\n  //                 cartId,\n  //                 customerId,\n  //                 paymentId,\n  //                 status: 'pending',\n  //                 shippingInfo\n  //             },\n  //             {\n  //                 headers: {\n  //                     Authorization: `Bearer ${token}`\n  //                 }\n  //             }\n  //         );\n\n  //         const orderId = orderRes.data.order._id;\n\n  //         await Promise.all(selectedItems.map(async (item) => {\n  //             const prod = getProductById(item.productId);\n  //             const price = prod.discounted_price || prod.price || 0;\n\n  //             await axios.post(\n  //                 'http://localhost:4001/api/orderDetails/create',\n  //                 {\n  //                     orderId,\n  //                     productId: item.productId,\n  //                     paymentId,\n  //                     quantity: item.quantity,\n  //                     totalPrice: price * item.quantity\n  //                 },\n  //                 {\n  //                     headers: {\n  //                         Authorization: `Bearer ${token}`\n  //                     }\n  //                 }\n  //             );\n  //         }));\n\n  //         alert('Đặt hàng thành công!');\n  //     } catch (error) {\n  //         console.error('Lỗi khi đặt hàng:', error.response?.data || error.message);\n  //         alert('Đặt hàng thất bại!');\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_c = Order;\nvar _c;\n$RefreshReg$(_c, \"Order\");","map":{"version":3,"names":["React","useState","useEffect","useAppContext","axios","Order"],"sources":["D:/Ecommerce/frontend/src/components/Order/Order.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport axios from 'axios';\r\nimport './order.css';\r\n\r\nexport const Order = () => {\r\n    // const { cartItems, products, customerId, cartId, token } = useAppContext(); \r\n    // const [paymentMethod, setPaymentMethod] = useState('cod');\r\n    // const [shippingInfo, setShippingInfo] = useState({\r\n    //     name: '',\r\n    //     phone: '',\r\n    //     province: '',\r\n    //     address: ''\r\n    // });\r\n\r\n    // const selectedItems = cartItems.filter(item => item.selected);\r\n    // const getProductById = (id) => products.find((p) => p._id === id);\r\n\r\n    // const totalPrice = selectedItems.reduce((acc, item) => {\r\n    //     const prod = getProductById(item.productId);\r\n    //     if (!prod) return acc;\r\n    //     const price = prod.discounted_price || prod.price || 0;\r\n    //     return acc + price * item.quantity;\r\n    // }, 0);\r\n\r\n    // const handleOrderSubmit = async () => {\r\n    //     try {\r\n    //         if (!cartId || !customerId || !token) {\r\n    //             alert(\"Lỗi: Thiếu thông tin người dùng hoặc giỏ hàng.\");\r\n    //             return;\r\n    //         }\r\n\r\n    //         const paymentRes = await axios.post(\r\n    //             'http://localhost:3007/api/payment/create',\r\n    //             {\r\n    //                 paymentMethod: paymentMethod,\r\n    //                 paymentStatus: 'Pending'\r\n    //             },\r\n    //             {\r\n    //                 headers: {\r\n    //                     Authorization: `Bearer ${token}`\r\n    //                 }\r\n    //             }\r\n    //         );\r\n\r\n    //         const paymentId = paymentRes.data.payment._id;\r\n    //         if (!paymentId) throw new Error('Payment ID không hợp lệ');\r\n\r\n    //         const orderRes = await axios.post(\r\n    //             'http://localhost:4000/api/order/create',\r\n    //             {\r\n    //                 totalOrder: totalPrice,\r\n    //                 discountId: [],\r\n    //                 cartId,\r\n    //                 customerId,\r\n    //                 paymentId,\r\n    //                 status: 'pending',\r\n    //                 shippingInfo\r\n    //             },\r\n    //             {\r\n    //                 headers: {\r\n    //                     Authorization: `Bearer ${token}`\r\n    //                 }\r\n    //             }\r\n    //         );\r\n\r\n    //         const orderId = orderRes.data.order._id;\r\n\r\n    //         await Promise.all(selectedItems.map(async (item) => {\r\n    //             const prod = getProductById(item.productId);\r\n    //             const price = prod.discounted_price || prod.price || 0;\r\n\r\n    //             await axios.post(\r\n    //                 'http://localhost:4001/api/orderDetails/create',\r\n    //                 {\r\n    //                     orderId,\r\n    //                     productId: item.productId,\r\n    //                     paymentId,\r\n    //                     quantity: item.quantity,\r\n    //                     totalPrice: price * item.quantity\r\n    //                 },\r\n    //                 {\r\n    //                     headers: {\r\n    //                         Authorization: `Bearer ${token}`\r\n    //                     }\r\n    //                 }\r\n    //             );\r\n    //         }));\r\n\r\n    //         alert('Đặt hàng thành công!');\r\n    //     } catch (error) {\r\n    //         console.error('Lỗi khi đặt hàng:', error.response?.data || error.message);\r\n    //         alert('Đặt hàng thất bại!');\r\n    //     }\r\n    // };\r\n\r\n\r\n    return (\r\n        <div className=\"payment-container\">\r\n            {/* <div className=\"address-section\">\r\n                <h3>Địa chỉ nhận hàng</h3>\r\n                <form className=\"address-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Họ và tên\"\r\n                        required\r\n                        value={shippingInfo.name}\r\n                        onChange={(e) => setShippingInfo({ ...shippingInfo, name: e.target.value })}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Phone\"\r\n                        required\r\n                        value={shippingInfo.phone}\r\n                        onChange={(e) => setShippingInfo({ ...shippingInfo, phone: e.target.value })}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Tỉnh / Thành phố\"\r\n                        required\r\n                        value={shippingInfo.province}\r\n                        onChange={(e) => setShippingInfo({ ...shippingInfo, province: e.target.value })}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Địa chỉ chi tiết\"\r\n                        required\r\n                        value={shippingInfo.address}\r\n                        onChange={(e) => setShippingInfo({ ...shippingInfo, address: e.target.value })}\r\n                    />\r\n                </form>\r\n            </div>\r\n\r\n            <div className=\"payment-method-section\">\r\n                <h3>Phương thức thanh toán</h3>\r\n                <div className=\"payment-options\">\r\n                    {['cod', 'bank', 'credit'].map(method => (\r\n                        <label key={method}>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"paymentMethod\"\r\n                                value={method}\r\n                                checked={paymentMethod === method}\r\n                                onChange={() => setPaymentMethod(method)}\r\n                            />\r\n                            {method === 'cod' && 'Thanh toán khi nhận hàng (COD)'}\r\n                            {method === 'bank' && 'Chuyển khoản ngân hàng'}\r\n                            {method === 'credit' && 'Thẻ tín dụng / Ghi nợ'}\r\n                        </label>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"product-summary\">\r\n                <h3>Sản phẩm</h3>\r\n                {selectedItems.map((item, index) => {\r\n                    const prod = getProductById(item.productId);\r\n                    if (!prod) return null;\r\n\r\n                    const price = prod.discounted_price || prod.price || 0;\r\n                    return (\r\n                        <div className=\"summary-item\" key={index}>\r\n                            <img\r\n                                src={prod.img?.[0] || prod.image?.[0] || 'fallback.jpg'}\r\n                                alt={prod.name}\r\n                            />\r\n                            <div>\r\n                                <p>{prod.name}</p>\r\n                                <p>Số lượng: {item.quantity}</p>\r\n                                <p>Giá: đ{(price * item.quantity).toLocaleString('vi-VN')}</p>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n\r\n            <div className=\"payment-summary\">\r\n                <h3>Tổng thanh toán</h3>\r\n                <p>đ{totalPrice.toLocaleString('vi-VN')}</p>\r\n                <button className=\"btn-confirm\" onClick={handleOrderSubmit}>\r\n                    Đặt hàng\r\n                </button>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AAAC;AAErB,OAAO,MAAMC,KAAK,GAAG,MAAM;EACvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAGA,oBACI;IAAK,SAAS,EAAC;EAAmB;IAAA;IAAA;IAAA;EAAA,QAqF5B;AAEd,CAAC;AAAC,KApLWA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}