{"ast":null,"code":"const handleOrderSubmit = async () => {\n  try {\n    // Gửi yêu cầu tạo phương thức thanh toán\n    const paymentRes = await axios.post('http://localhost:3007/api/payment/create', {\n      paymentMethod: paymentMethod,\n      // paymentMethod là cod, bank, credit\n      paymentStatus: 'Pending'\n    });\n    console.log(\"Payment Response:\", paymentRes.data); // Kiểm tra phản hồi từ API thanh toán\n\n    // Lấy paymentId từ phản hồi của API thanh toán\n    const paymentId = paymentRes.data.payment._id; // paymentId là ObjectId hợp lệ\n    if (!paymentId) {\n      throw new Error('Payment ID không hợp lệ');\n    }\n\n    // Gửi yêu cầu tạo đơn hàng với paymentId đã nhận\n    const orderRes = await axios.post('http://localhost:4000/api/order/create', {\n      totalOrder: totalPrice,\n      discountId: [],\n      cartId: cartId,\n      customerId: customerId,\n      paymentId: paymentId,\n      // Sử dụng paymentId hợp lệ\n      status: 'pending',\n      shippingInfo: shippingInfo\n    });\n    console.log(\"Order Response:\", orderRes.data); // Kiểm tra phản hồi từ API đơn hàng\n\n    const orderId = orderRes.data.order._id;\n\n    // Tạo chi tiết đơn hàng cho từng sản phẩm\n    await Promise.all(selectedItems.map(async item => {\n      const prod = getProductById(item.productId);\n      const price = prod.discounted_price || prod.price || 0;\n      await axios.post('http://localhost:4001/api/orderDetails/create', {\n        orderId,\n        productId: item.productId,\n        paymentId,\n        // Sử dụng paymentId hợp lệ\n        quantity: item.quantity,\n        totalPrice: price * item.quantity\n      });\n    }));\n    alert('Đặt hàng thành công!');\n  } catch (error) {\n    console.error('Lỗi khi đặt hàng:', error.response || error.message);\n    alert('Đặt hàng thất bại!');\n  }\n};","map":{"version":3,"names":["handleOrderSubmit","paymentRes","axios","post","paymentMethod","paymentStatus","console","log","data","paymentId","payment","_id","Error","orderRes","totalOrder","totalPrice","discountId","cartId","customerId","status","shippingInfo","orderId","order","Promise","all","selectedItems","map","item","prod","getProductById","productId","price","discounted_price","quantity","alert","error","response","message"],"sources":["D:/Ecommerce/frontend/src/components/Order/Order.jsx"],"sourcesContent":["const handleOrderSubmit = async () => {\r\n    try {\r\n        // Gửi yêu cầu tạo phương thức thanh toán\r\n        const paymentRes = await axios.post('http://localhost:3007/api/payment/create', {\r\n            paymentMethod: paymentMethod,  // paymentMethod là cod, bank, credit\r\n            paymentStatus: 'Pending'\r\n        });\r\n\r\n        console.log(\"Payment Response:\", paymentRes.data);  // Kiểm tra phản hồi từ API thanh toán\r\n\r\n        // Lấy paymentId từ phản hồi của API thanh toán\r\n        const paymentId = paymentRes.data.payment._id;  // paymentId là ObjectId hợp lệ\r\n        if (!paymentId) {\r\n            throw new Error('Payment ID không hợp lệ');\r\n        }\r\n\r\n        // Gửi yêu cầu tạo đơn hàng với paymentId đã nhận\r\n        const orderRes = await axios.post('http://localhost:4000/api/order/create', {\r\n            totalOrder: totalPrice,\r\n            discountId: [],\r\n            cartId: cartId,\r\n            customerId: customerId,\r\n            paymentId: paymentId,  // Sử dụng paymentId hợp lệ\r\n            status: 'pending',\r\n            shippingInfo: shippingInfo\r\n        });\r\n\r\n        console.log(\"Order Response:\", orderRes.data);  // Kiểm tra phản hồi từ API đơn hàng\r\n\r\n        const orderId = orderRes.data.order._id;\r\n\r\n        // Tạo chi tiết đơn hàng cho từng sản phẩm\r\n        await Promise.all(selectedItems.map(async (item) => {\r\n            const prod = getProductById(item.productId);\r\n            const price = prod.discounted_price || prod.price || 0;\r\n\r\n            await axios.post('http://localhost:4001/api/orderDetails/create', {\r\n                orderId,\r\n                productId: item.productId,\r\n                paymentId,  // Sử dụng paymentId hợp lệ\r\n                quantity: item.quantity,\r\n                totalPrice: price * item.quantity\r\n            });\r\n        }));\r\n\r\n        alert('Đặt hàng thành công!');\r\n    } catch (error) {\r\n        console.error('Lỗi khi đặt hàng:', error.response || error.message);\r\n        alert('Đặt hàng thất bại!');\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,YAAY;EAClC,IAAI;IACA;IACA,MAAMC,UAAU,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,0CAA0C,EAAE;MAC5EC,aAAa,EAAEA,aAAa;MAAG;MAC/BC,aAAa,EAAE;IACnB,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEN,UAAU,CAACO,IAAI,CAAC,CAAC,CAAE;;IAEpD;IACA,MAAMC,SAAS,GAAGR,UAAU,CAACO,IAAI,CAACE,OAAO,CAACC,GAAG,CAAC,CAAE;IAChD,IAAI,CAACF,SAAS,EAAE;MACZ,MAAM,IAAIG,KAAK,CAAC,yBAAyB,CAAC;IAC9C;;IAEA;IACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACC,IAAI,CAAC,wCAAwC,EAAE;MACxEW,UAAU,EAAEC,UAAU;MACtBC,UAAU,EAAE,EAAE;MACdC,MAAM,EAAEA,MAAM;MACdC,UAAU,EAAEA,UAAU;MACtBT,SAAS,EAAEA,SAAS;MAAG;MACvBU,MAAM,EAAE,SAAS;MACjBC,YAAY,EAAEA;IAClB,CAAC,CAAC;IAEFd,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEM,QAAQ,CAACL,IAAI,CAAC,CAAC,CAAE;;IAEhD,MAAMa,OAAO,GAAGR,QAAQ,CAACL,IAAI,CAACc,KAAK,CAACX,GAAG;;IAEvC;IACA,MAAMY,OAAO,CAACC,GAAG,CAACC,aAAa,CAACC,GAAG,CAAC,MAAOC,IAAI,IAAK;MAChD,MAAMC,IAAI,GAAGC,cAAc,CAACF,IAAI,CAACG,SAAS,CAAC;MAC3C,MAAMC,KAAK,GAAGH,IAAI,CAACI,gBAAgB,IAAIJ,IAAI,CAACG,KAAK,IAAI,CAAC;MAEtD,MAAM7B,KAAK,CAACC,IAAI,CAAC,+CAA+C,EAAE;QAC9DkB,OAAO;QACPS,SAAS,EAAEH,IAAI,CAACG,SAAS;QACzBrB,SAAS;QAAG;QACZwB,QAAQ,EAAEN,IAAI,CAACM,QAAQ;QACvBlB,UAAU,EAAEgB,KAAK,GAAGJ,IAAI,CAACM;MAC7B,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IAEHC,KAAK,CAAC,sBAAsB,CAAC;EACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ7B,OAAO,CAAC6B,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACE,OAAO,CAAC;IACnEH,KAAK,CAAC,oBAAoB,CAAC;EAC/B;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}