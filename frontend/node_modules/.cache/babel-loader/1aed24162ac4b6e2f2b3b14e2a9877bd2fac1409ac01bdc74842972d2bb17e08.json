{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ecommerce\\\\frontend\\\\src\\\\context\\\\AppContext.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [customer, setCustomer] = useState(null);\n  const [seller, setSeller] = useState(null);\n  const [products, setProducts] = useState([]);\n  const [cartItems, setCartItems] = useState(() => {\n    // ... existing cartItems logic\n  });\n  const [categories, setCategories] = useState([]);\n  const [navigate] = useNavigate();\n  const [customerId, setCustomerId] = useState(null); // Add customerId state\n  const [cartId, setCartId] = useState(null); // Add cartId state\n  // ... other states and functions\n\n  const handleLogin = customerData => {\n    const userId = (customerData === null || customerData === void 0 ? void 0 : customerData._id) || (customerData === null || customerData === void 0 ? void 0 : customerData.id);\n    setCustomer(customerData);\n    setCustomerId(userId); // Set customerId\n    // ... existing handleLogin logic\n    fetchCartItems(userId); // This function might need to be updated to fetch cartId as well\n  };\n\n  const fetchCartItems = async customerId => {\n    try {\n      const res = await axios.get(`http://localhost:3003/api/cart/customer/${customerId}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      console.log('Cart data from server:', res.data);\n      if (Array.isArray(res.data)) {\n        var _res$data$;\n        // Assuming your cart API response includes a cart ID\n        const fetchedCartId = (_res$data$ = res.data[0]) === null || _res$data$ === void 0 ? void 0 : _res$data$.cartId; // Adjust based on your API response structure\n        if (fetchedCartId) {\n          setCartId(fetchedCartId);\n          localStorage.setItem('cartId', fetchedCartId);\n        }\n        const formattedCart = res.data.map(item => {\n          var _item$productId$image;\n          return {\n            _id: item._id,\n            productId: item.productId._id,\n            quantity: item.quantity,\n            productName: item.productId.name,\n            productImage: (_item$productId$image = item.productId.image) === null || _item$productId$image === void 0 ? void 0 : _item$productId$image[0],\n            productPrice: item.productId.price\n          };\n        });\n        setCartItems(formattedCart);\n        localStorage.setItem(getCartKey(customerId), JSON.stringify(formattedCart));\n      } else {\n        // ... existing logic for when cart data is not an array\n      }\n    } catch (error) {\n      console.error(\"Lỗi khi tải giỏ hàng:\", error);\n      // ... existing error handling\n    }\n  };\n\n  useEffect(() => {\n    // ... existing useEffect\n\n    const storedCustomer = localStorage.getItem('customer');\n    if (storedCustomer) {\n      const customerData = JSON.parse(storedCustomer);\n      const userId = (customerData === null || customerData === void 0 ? void 0 : customerData._id) || (customerData === null || customerData === void 0 ? void 0 : customerData.id);\n      setCustomer(customerData);\n      setCustomerId(userId); // Set customerId on component mount\n      // ... existing logic\n      fetchCartItems(userId); // Fetch cart and potentially cartId on mount\n    }\n  }, []);\n  const value = {\n    navigate,\n    products,\n    cartItems,\n    setCartItems,\n    addToCart,\n    customer,\n    seller,\n    setCustomer,\n    setSeller,\n    categories,\n    handleLogout,\n    customerProfile,\n    setCustomerProfile,\n    handleLogin,\n    customerId,\n    // Include customerId in the context value\n    cartId,\n    // Include cartId in the context value\n    setCartId // Optionally include setCartId if needed elsewhere\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(AppContextProvider, \"6uvCsIC9J6ppalopySjylucQ3SA=\", true);\n_c = AppContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"names":["AppContextProvider","children","customer","setCustomer","useState","seller","setSeller","products","setProducts","cartItems","setCartItems","categories","setCategories","navigate","useNavigate","customerId","setCustomerId","cartId","setCartId","handleLogin","customerData","userId","_id","id","fetchCartItems","res","axios","get","headers","Authorization","localStorage","getItem","console","log","data","Array","isArray","fetchedCartId","setItem","formattedCart","map","item","productId","quantity","productName","name","productImage","image","productPrice","price","getCartKey","JSON","stringify","error","useEffect","storedCustomer","parse","value","addToCart","handleLogout","customerProfile","setCustomerProfile"],"sources":["D:/Ecommerce/frontend/src/context/AppContext.jsx"],"sourcesContent":["export const AppContextProvider = ({ children }) => {\r\n    const [customer, setCustomer] = useState(null);\r\n    const [seller, setSeller] = useState(null);\r\n    const [products, setProducts] = useState([]);\r\n    const [cartItems, setCartItems] = useState(() => {\r\n        // ... existing cartItems logic\r\n    });\r\n    const [categories, setCategories] = useState([]);\r\n    const [navigate] = useNavigate();\r\n    const [customerId, setCustomerId] = useState(null); // Add customerId state\r\n    const [cartId, setCartId] = useState(null); // Add cartId state\r\n    // ... other states and functions\r\n\r\n    const handleLogin = (customerData) => {\r\n        const userId = customerData?._id || customerData?.id;\r\n        setCustomer(customerData);\r\n        setCustomerId(userId); // Set customerId\r\n        // ... existing handleLogin logic\r\n        fetchCartItems(userId); // This function might need to be updated to fetch cartId as well\r\n    };\r\n\r\n    const fetchCartItems = async (customerId) => {\r\n        try {\r\n            const res = await axios.get(`http://localhost:3003/api/cart/customer/${customerId}`, {\r\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n            });\r\n            console.log('Cart data from server:', res.data);\r\n            if (Array.isArray(res.data)) {\r\n                // Assuming your cart API response includes a cart ID\r\n                const fetchedCartId = res.data[0]?.cartId; // Adjust based on your API response structure\r\n                if (fetchedCartId) {\r\n                    setCartId(fetchedCartId);\r\n                    localStorage.setItem('cartId', fetchedCartId);\r\n                }\r\n                const formattedCart = res.data.map(item => ({\r\n                    _id: item._id,\r\n                    productId: item.productId._id,\r\n                    quantity: item.quantity,\r\n                    productName: item.productId.name,\r\n                    productImage: item.productId.image?.[0],\r\n                    productPrice: item.productId.price\r\n                }));\r\n                setCartItems(formattedCart);\r\n                localStorage.setItem(getCartKey(customerId), JSON.stringify(formattedCart));\r\n            } else {\r\n                // ... existing logic for when cart data is not an array\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Lỗi khi tải giỏ hàng:\", error);\r\n            // ... existing error handling\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // ... existing useEffect\r\n\r\n        const storedCustomer = localStorage.getItem('customer');\r\n        if (storedCustomer) {\r\n            const customerData = JSON.parse(storedCustomer);\r\n            const userId = customerData?._id || customerData?.id;\r\n            setCustomer(customerData);\r\n            setCustomerId(userId); // Set customerId on component mount\r\n            // ... existing logic\r\n            fetchCartItems(userId); // Fetch cart and potentially cartId on mount\r\n        }\r\n    }, []);\r\n\r\n    const value = {\r\n        navigate,\r\n        products,\r\n        cartItems,\r\n        setCartItems,\r\n        addToCart,\r\n        customer,\r\n        seller,\r\n        setCustomer,\r\n        setSeller,\r\n        categories,\r\n        handleLogout,\r\n        customerProfile,\r\n        setCustomerProfile,\r\n        handleLogin,\r\n        customerId, // Include customerId in the context value\r\n        cartId,     // Include cartId in the context value\r\n        setCartId   // Optionally include setCartId if needed elsewhere\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider value={value}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}