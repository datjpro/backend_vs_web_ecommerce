{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ecommerce\\\\frontend\\\\src\\\\components\\\\Cart\\\\Cart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useAppContext } from '../../context/AppContext';\nimport { Link, useNavigate } from 'react-router-dom';\nimport './cart.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Cart = () => {\n  //   const { cartItems, setCartItems, customer } = useAppContext();\n  //   const navigate = useNavigate();\n  //   const [selectedItems, setSelectedItems] = useState([]);\n\n  // useEffect(() => {\n\n  //   setSelectedItems(prevSelected =>\n  //     cartItems\n  //       .filter(item => prevSelected.includes(item.productId))\n  //       .map(item => item.productId)\n  //   );\n  // }, [cartItems]);\n\n  //   const getCartKey = () => {\n  //     const userId = customer?._id || customer?.id;\n  //     return userId ? `cartItems_user_${userId}` : 'cartItems_guest';\n  //   };\n\n  //   const updateCartInLocalStorage = (newCartItems) => {\n  //     localStorage.setItem(getCartKey(), JSON.stringify(newCartItems));\n  //     console.log('Cart Component - updateCartInLocalStorage:', newCartItems);\n  //     setCartItems(newCartItems);\n  //   };\n\n  //   const handleSelectItem = (productId) => {\n  //     setSelectedItems(prev =>\n  //       prev.includes(productId)\n  //         ? prev.filter(id => id !== productId)\n  //         : [...prev, productId]\n  //     );\n  //   };\n\n  //   const handleSelectAll = () => {\n  //     if (selectedItems.length === cartItems.length) {\n  //       setSelectedItems([]);\n  //     } else {\n  //       setSelectedItems(cartItems.map(item => item.productId));\n  //     }\n  //   };\n\n  //   const handleIncrease = async (productId) => {\n  //     try {\n  //       const updatedCartItems = cartItems.map(item =>\n  //         item.productId === productId\n  //           ? { ...item, quantity: item.quantity + 1 }\n  //           : item\n  //       );\n  //       updateCartInLocalStorage(updatedCartItems);\n\n  //       const updatedItemOnServer = updatedCartItems.find(item => item.productId === productId);\n  //       if (customer && updatedItemOnServer?._id) {\n  //         await axios.put(`http://localhost:3003/api/cart/update/${updatedItemOnServer._id}`,\n  //           { quantity: updatedItemOnServer.quantity },\n  //           {\n  //             headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n  //           }\n  //         );\n  //       }\n\n  //     } catch (error) {\n  //       console.log('Lỗi khi cập nhật giỏ hàng:', error);\n  //     }\n  //   };\n\n  //   const handleDecrease = async (productId) => {\n  //     try {\n  //       const updatedCartItems = cartItems.map(item =>\n  //         item.productId === productId && item.quantity > 1\n  //           ? { ...item, quantity: item.quantity - 1 }\n  //           : item\n  //       );\n  //       updateCartInLocalStorage(updatedCartItems);\n\n  //       const updatedItemOnServer = updatedCartItems.find(item => item.productId === productId);\n  //       if (customer && updatedItemOnServer?._id) {\n  //         await axios.put(`http://localhost:3003/api/cart/update/${updatedItemOnServer._id}`,\n  //           { quantity: updatedItemOnServer.quantity },\n  //           {\n  //             headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n  //           }\n  //         );\n  //       }\n  //     } catch (error) {\n  //       console.log('Lỗi khi cập nhật giỏ hàng:', error);\n  //     }\n  //   };\n\n  // const handleDelete = async (productId) => {\n  //   try {\n  //     if (window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) {\n  //       const customerIdToSend = customer._id || customer.id; \n  //       console.log(\"CustomerId gửi đi:\", customerIdToSend);\n  //       console.log(\"ProductId gửi đi:\", productId);\n  //       const response = await axios.delete('http://localhost:3003/api/cart/delete-product', {\n  //         data: {\n  //           productId: productId,\n  //           customerId: customerIdToSend\n  //         },\n  //         headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n  //       });\n  //       console.log(response.data.message);\n  //       const updatedCartItems = cartItems.filter(item => item.productId !== productId);\n  //       updateCartInLocalStorage(updatedCartItems);\n  //     }\n  //   } catch (error) {\n  //     console.error('Lỗi khi xóa sản phẩm:', error);\n  //   }\n  // };\n\n  //   const handleBuyNow = () => {\n  //     const updatedCart = cartItems.map(item => ({\n  //       ...item,\n  //       selected: selectedItems.includes(item.productId),\n  //     }));\n  //     setCartItems(updatedCart);\n  //     navigate('/order');\n  //   };\n\n  //   const totalSelectedPrice = selectedItems.reduce((total, productId) => {\n  //     const item = cartItems.find(item => item.productId === productId);\n  //     return total + (item?.productPrice || 0) * (item?.quantity || 0);\n  //   }, 0);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gi\\u1ECF h\\xE0ng c\\u1EE7a b\\u1EA1n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_c = Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useState","useEffect","useAppContext","Link","useNavigate","axios","Cart"],"sources":["D:/Ecommerce/frontend/src/components/Cart/Cart.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport './cart.css';\r\nimport axios from 'axios';\r\n\r\nexport const Cart = () => {\r\n//   const { cartItems, setCartItems, customer } = useAppContext();\r\n//   const navigate = useNavigate();\r\n//   const [selectedItems, setSelectedItems] = useState([]);\r\n\r\n// useEffect(() => {\r\n\r\n//   setSelectedItems(prevSelected =>\r\n//     cartItems\r\n//       .filter(item => prevSelected.includes(item.productId))\r\n//       .map(item => item.productId)\r\n//   );\r\n// }, [cartItems]);\r\n\r\n//   const getCartKey = () => {\r\n//     const userId = customer?._id || customer?.id;\r\n//     return userId ? `cartItems_user_${userId}` : 'cartItems_guest';\r\n//   };\r\n\r\n//   const updateCartInLocalStorage = (newCartItems) => {\r\n//     localStorage.setItem(getCartKey(), JSON.stringify(newCartItems));\r\n//     console.log('Cart Component - updateCartInLocalStorage:', newCartItems);\r\n//     setCartItems(newCartItems);\r\n//   };\r\n\r\n//   const handleSelectItem = (productId) => {\r\n//     setSelectedItems(prev =>\r\n//       prev.includes(productId)\r\n//         ? prev.filter(id => id !== productId)\r\n//         : [...prev, productId]\r\n//     );\r\n//   };\r\n\r\n//   const handleSelectAll = () => {\r\n//     if (selectedItems.length === cartItems.length) {\r\n//       setSelectedItems([]);\r\n//     } else {\r\n//       setSelectedItems(cartItems.map(item => item.productId));\r\n//     }\r\n//   };\r\n\r\n//   const handleIncrease = async (productId) => {\r\n//     try {\r\n//       const updatedCartItems = cartItems.map(item =>\r\n//         item.productId === productId\r\n//           ? { ...item, quantity: item.quantity + 1 }\r\n//           : item\r\n//       );\r\n//       updateCartInLocalStorage(updatedCartItems);\r\n\r\n//       const updatedItemOnServer = updatedCartItems.find(item => item.productId === productId);\r\n//       if (customer && updatedItemOnServer?._id) {\r\n//         await axios.put(`http://localhost:3003/api/cart/update/${updatedItemOnServer._id}`,\r\n//           { quantity: updatedItemOnServer.quantity },\r\n//           {\r\n//             headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n//           }\r\n//         );\r\n//       }\r\n\r\n//     } catch (error) {\r\n//       console.log('Lỗi khi cập nhật giỏ hàng:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDecrease = async (productId) => {\r\n//     try {\r\n//       const updatedCartItems = cartItems.map(item =>\r\n//         item.productId === productId && item.quantity > 1\r\n//           ? { ...item, quantity: item.quantity - 1 }\r\n//           : item\r\n//       );\r\n//       updateCartInLocalStorage(updatedCartItems);\r\n\r\n//       const updatedItemOnServer = updatedCartItems.find(item => item.productId === productId);\r\n//       if (customer && updatedItemOnServer?._id) {\r\n//         await axios.put(`http://localhost:3003/api/cart/update/${updatedItemOnServer._id}`,\r\n//           { quantity: updatedItemOnServer.quantity },\r\n//           {\r\n//             headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n//           }\r\n//         );\r\n//       }\r\n//     } catch (error) {\r\n//       console.log('Lỗi khi cập nhật giỏ hàng:', error);\r\n//     }\r\n//   };\r\n\r\n// const handleDelete = async (productId) => {\r\n//   try {\r\n//     if (window.confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) {\r\n//       const customerIdToSend = customer._id || customer.id; \r\n//       console.log(\"CustomerId gửi đi:\", customerIdToSend);\r\n//       console.log(\"ProductId gửi đi:\", productId);\r\n//       const response = await axios.delete('http://localhost:3003/api/cart/delete-product', {\r\n//         data: {\r\n//           productId: productId,\r\n//           customerId: customerIdToSend\r\n//         },\r\n//         headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n//       });\r\n//       console.log(response.data.message);\r\n//       const updatedCartItems = cartItems.filter(item => item.productId !== productId);\r\n//       updateCartInLocalStorage(updatedCartItems);\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('Lỗi khi xóa sản phẩm:', error);\r\n//   }\r\n// };\r\n\r\n\r\n//   const handleBuyNow = () => {\r\n//     const updatedCart = cartItems.map(item => ({\r\n//       ...item,\r\n//       selected: selectedItems.includes(item.productId),\r\n//     }));\r\n//     setCartItems(updatedCart);\r\n//     navigate('/order');\r\n//   };\r\n\r\n//   const totalSelectedPrice = selectedItems.reduce((total, productId) => {\r\n//     const item = cartItems.find(item => item.productId === productId);\r\n//     return total + (item?.productPrice || 0) * (item?.quantity || 0);\r\n//   }, 0);\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <h2>Giỏ hàng của bạn</h2>\r\n{/* \r\n      {cartItems.length === 0 ? (\r\n        <div className=\"empty-cart\">\r\n          <p>Giỏ hàng trống</p>\r\n          <Link to=\"/\" className=\"btn-continue\">Tiếp tục mua sắm</Link>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"cart-header\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={selectedItems.length === cartItems.length}\r\n              onChange={handleSelectAll}\r\n            />\r\n            <span>Chọn tất cả</span>\r\n          </div>\r\n\r\n          <div className=\"cart-items\">\r\n            {cartItems.map((item, index) => (\r\n              <div className=\"cart-item\" key={index}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedItems.includes(item.productId)}\r\n                  onChange={() => handleSelectItem(item.productId)}\r\n                />\r\n                <img src={item.productImage} alt={item.productName} />\r\n                <div className=\"cart-item-info\">\r\n                  <h4>{item.productName}</h4>\r\n                  <p>Giá: đ{item.productPrice.toLocaleString()}</p>\r\n\r\n                  <div className=\"quantity-control\">\r\n                    <button onClick={() => handleDecrease(item.productId)}>-</button>\r\n                    <input type=\"text\" value={item.quantity} readOnly />\r\n                    <button onClick={() => handleIncrease(item.productId)}>+</button>\r\n                  </div>\r\n\r\n                  <p>Thành tiền: đ{(item.productPrice * item.quantity).toLocaleString()}</p>\r\n\r\n                  <button className=\"btn-delete\" onClick={() => handleDelete(item.productId)}>\r\n                    Xóa\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"cart-footer\">\r\n            <div className=\"footer-left\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedItems.length === cartItems.length}\r\n                onChange={handleSelectAll}\r\n              />\r\n              <span>Chọn tất cả ({selectedItems.length})</span>\r\n            </div>\r\n\r\n            <div className=\"footer-right\">\r\n              <p>Tổng thanh toán: <span>đ{totalSelectedPrice.toLocaleString()}</span></p>\r\n              <button\r\n                className=\"btn-buy\"\r\n                disabled={selectedItems.length === 0}\r\n                onClick={handleBuyNow}\r\n              >\r\n                Đặt hàng\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )} */}\r\n    </div>\r\n  );\r\n};"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AACpD,OAAO,YAAY;AACnB,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,OAAO,MAAMC,IAAI,GAAG,MAAM;EAC1B;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEE,oBACE;IAAK,SAAS,EAAC,MAAM;IAAA,uBACnB;MAAA,UAAI;IAAgB;MAAA;MAAA;MAAA;IAAA;EAAK;IAAA;IAAA;IAAA;EAAA,QAsErB;AAEV,CAAC;AAAC,KAvMWA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}